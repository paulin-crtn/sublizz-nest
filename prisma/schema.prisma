// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  leases Lease[]
  leaseFavorites LeaseFavorite[]
  messageFromUser ConversationMessage[] @relation("fromUser")
  messageToUser ConversationMessage[] @relation("toUser")
  emailVerification EmailVerification[]
  passwordReset PasswordReset[]

  userRole UserRole @relation(fields: [role], references: [role], onUpdate: NoAction, onDelete: NoAction)

  id Int @id @default(autoincrement())
  role String @db.VarChar(10)
  firstName String @db.VarChar(30)
  lastName String? @db.VarChar(30)
  phoneNumber String? @db.VarChar(10)
  email String @db.VarChar(30) @unique
  emailVerifiedAt DateTime?
  passwordHash String
  refreshTokenHash String?
  profilePictureName String?
  standardMessage String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "user")
}

model UserRole {
  users User[]
  
  id Int @id @default(autoincrement())
  role String @db.VarChar(10) @unique

  @@map(name: "user_role")
}

model Lease {
  leaseImages LeaseImage[]
  leaseFavorites LeaseFavorite[]
  conversationMessages ConversationMessage[]

  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  leaseType LeaseType @relation(fields: [type], references: [type], onUpdate: NoAction, onDelete: NoAction)

  id Int @id @default(autoincrement())
  userId Int
  type String @db.VarChar(15)
  street String @db.VarChar(30)
  postCode String @db.VarChar(5)
  city String @db.VarChar(30)
  gpsLatitude Decimal? @db.Decimal(8, 6)
  gpsLongitude Decimal? @db.Decimal(9, 6)
  description String?
  surface Int
  room Int
  startDate DateTime
  endDate DateTime?
  isDateFlexible Int
  pricePerMonth Int
  isPublished Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "lease")
}

model LeaseImage {
  lease Lease @relation(fields: [leaseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  
  id Int @id @default(autoincrement())
  leaseId Int
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "lease_img")
}

model LeaseType {
  leases Lease[]
  
  id Int @id @default(autoincrement())
  type String @db.VarChar(15) @unique

  @@map(name: "lease_type")
}

model LeaseFavorite {
  lease Lease @relation(fields: [leaseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id Int @id @default(autoincrement())
  userId Int
  leaseId Int
  createdAt DateTime @default(now())

  @@map(name: "lease_favorite")
}

model Conversation {
  conversationMessages ConversationMessage[]

  id String @db.VarChar(16) @id
}

model ConversationMessage {
  conversation Conversation @relation(fields: [conversationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  lease Lease @relation(fields: [leaseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  fromUser User @relation(name: "fromUser", fields: [fromUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  toUser User @relation(name: "toUser", fields: [toUserId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  id Int @id @default(autoincrement())
  conversationId String @db.VarChar(16)
  leaseId Int
  fromUserId Int
  toUserId Int
  content String
  createdAt DateTime @default(now())

  @@map(name: "message")
}

model EmailVerification {
  user User @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  
  id Int @id @default(autoincrement())
  userId Int
  email String
  tokenHash String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "email_verification")
}

model PasswordReset {
  user User @relation(fields: [userEmail], references: [email], onUpdate: Cascade, onDelete: Cascade)
  
  id Int @id @default(autoincrement())
  userEmail String
  tokenHash String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map(name: "password_reset")
}